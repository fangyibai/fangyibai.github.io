<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fangyibai.github.io</id>
    <title>方乙百Notes</title>
    <updated>2020-03-29T15:33:32.178Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fangyibai.github.io"/>
    <link rel="self" href="https://fangyibai.github.io/atom.xml"/>
    <subtitle>日益努力而后风生水起</subtitle>
    <logo>https://fangyibai.github.io/images/avatar.png</logo>
    <icon>https://fangyibai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 方乙百Notes</rights>
    <entry>
        <title type="html"><![CDATA[Dockerfile语法梳理]]></title>
        <id>https://fangyibai.github.io/post/dockerfile-clear-up/</id>
        <link href="https://fangyibai.github.io/post/dockerfile-clear-up/">
        </link>
        <updated>2020-03-29T15:19:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dockerfile语法梳理">Dockerfile语法梳理</h1>
<h2 id="语法梳理">语法梳理</h2>
<h3 id="from">FROM</h3>
<pre><code>FROM [--platform=&lt;platform&gt;] &lt;image&gt; [AS &lt;name&gt;]

FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]

FROM [--platform=&lt;platform&gt;] &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]
</code></pre>
<ol>
<li>FROM是构建image的基础，一个有效的Dockerfile必须从一个FROM指令开始。</li>
<li>为了安全，尽量使用官方的image作为base image。</li>
</ol>
<h3 id="label">LABEL</h3>
<pre><code># Set one or more individual labels
LABEL com.example.version=&quot;0.0.1-beta&quot;
LABEL vendor1=&quot;ACME Incorporated&quot;
LABEL vendor2=ZENITH\ Incorporated
LABEL com.example.release-date=&quot;2015-02-12&quot;
LABEL com.example.version.is-production=&quot;&quot;
</code></pre>
<p>用于定义image的metadata（类似于代码中的注释）。</p>
<ol>
<li>标签是一个键值对，以字符串的形式存储。</li>
<li>可以为一个对象指定多个标签，但是每个键值对在一个对象中必须是唯一的。</li>
<li>如果相同的键有多个值，则最近写入的值将覆盖所有以前的值。</li>
<li>尽量合并到一个标签里</li>
</ol>
<pre><code># Set multiple labels on one line
LABEL com.example.version=&quot;0.0.1-beta&quot; com.example.release-date=&quot;2015-02-12&quot;
</code></pre>
<pre><code># Set multiple labels at once, using line-continuation characters to break long lines
LABEL vendor=ACME\ Incorporated \
      com.example.is-beta= \
      com.example.is-production=&quot;&quot; \
      com.example.version=&quot;0.0.1-beta&quot; \
      com.example.release-date=&quot;2015-02-12&quot;
</code></pre>
<h3 id="run">RUN</h3>
<pre><code>#语法 两种方式
RUN &lt;command&gt; #以shell形式运行，默认为/bin/sh -c，Windows上默认为cmd /S /C）
RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] #例如 RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]
</code></pre>
<p>注意几点：</p>
<ol>
<li>为了避免无用分层，合并多条命令为一行。</li>
<li><code>RUN /bin/bash</code>是JSON格式，必须使用双引号。</li>
</ol>
<h3 id="cmd">CMD</h3>
<pre><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] #推荐exec方式
CMD [&quot;param1&quot;,&quot;param2&quot;] #默认参数
CMD command param1 param2 #shell方式
</code></pre>
<ol>
<li>一个<code>Dockerfile</code>中只能有一条<code>CMD</code>指令。如果有多个，只有最后一个有效。</li>
<li>如果<code>CMD</code>用于为<code>ENTRYPOINT</code>提供默认参数，那么应该使用JSON数组格式进行指定。</li>
<li>JSON数组格式必须使用双引号。</li>
<li>shell方式运行不会执行变量替换。
<ol>
<li>例如<code>CMD [&quot;echo&quot;， &quot;$HOME&quot;]</code>不会对<code>$HOME</code>执行变量替换</li>
<li>如果想要shell处理，使用shell表单或者执行shell。例如<code>CMD [&quot;sh&quot;， &quot;-c&quot;， &quot;echo $HOME&quot;]</code>。</li>
</ol>
</li>
</ol>
<h3 id="workdir">WORKDIR</h3>
<ol>
<li><code>WORKDIR</code>用于对<code>RUN</code>,<code>CMD</code>, <code>ENTRYPOINT</code>设置工作目录。</li>
<li>如果目录不存在则会自动创建。</li>
<li><code>WORKDIR</code>可以在<code>Dockerfile</code>中进行多次使用。</li>
<li><code>WORKDIR</code>可以解析<code>ENV</code>的环境变量。</li>
<li>如果是一个相对目录，则是<code>WORKDIR</code>之前的目录。</li>
<li>尽量使用绝对目录。</li>
</ol>
<pre><code>WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
#输出为/a/b/c
</code></pre>
<h3 id="add">ADD</h3>
<pre><code>#语法 --chown 只能构建Linux容器的Dockerfiles
ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;
ADD [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]
</code></pre>
<ol>
<li><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</li>
<li>如果URL文件受身份验证保护，则需要使用RUN wget，RUN curl，因为ADD指令不支持身份验证。</li>
<li>当要读取URL远程资源的时候，不推荐使用ADD指令，而是建议使用RUN指令，在RUN指令中执行wget或curl命令。</li>
<li>如果源文件是个归档文件（压缩文件），则docker会自动帮解压。</li>
</ol>
<h3 id="copy">COPY</h3>
<pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;
COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]
</code></pre>
<ol>
<li><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。</li>
<li><code>&lt;源路径&gt;</code>路径必须在构建的上下文目录中，不能使用 <code>ADD ../something /something</code>。</li>
<li><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match"><code>filepath.Match</code></a> 规则。</li>
</ol>
<pre><code>COPY hom* /mydir/
COPY hom?.txt /mydir/
</code></pre>
<ol>
<li>目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</li>
<li>满足同等功能的情况下，推荐使用<code>COPY</code>指令。<code>ADD</code>指令更擅长读取本地tar文件并解压缩。</li>
</ol>
<h3 id="env">ENV</h3>
<pre><code>#语法。ENV指令将环境变量&lt;key&gt;设置为值&lt;value&gt;。
ENV &lt;key&gt; &lt;value&gt;
ENV &lt;key&gt;=&lt;value&gt; 
#example
ENV myName John Doe
ENV myDog Rex The Dog
ENV myCat fluffy
#example
ENV myName=&quot;John Doe&quot; myDog=Rex\ The\ Dog \
    myCat=fluffy
</code></pre>
<ol>
<li>尽量使用evn 增加可维护性</li>
<li>第一种语法<code>ENV &lt;key&gt; &lt;value&gt;</code>第一个空格之后的整个字符串将被视为<value>包括空白字符。</li>
<li>第二种语法<code>&lt;key&gt;=&lt;value&gt;</code>允许同时设置多个变量。</li>
<li>使用<code>docker inspect</code>查看这些值。</li>
<li>使用<code>docker run --env &lt;key&gt;=&lt;value&gt;</code>更改它们。</li>
</ol>
<h3 id="volume">VOLUME</h3>
<pre><code>VOLUME [&quot;/data&quot;]
</code></pre>
<ol>
<li>在docker运行时，docker会创建一个匿名的<code>volume</code>，并将此<code>volume</code>绑定到容器的/data目录中。</li>
<li>Dockerfile中的<code>valume</code>每次运行一个容器都会自动创建一个匿名<code>volume</code>。</li>
<li>如果容器之间要共享数据需要通过<code>docker run -v mydata:/data</code>替代了 Dockerfile 中定义的匿名卷的挂载配置。</li>
</ol>
<h3 id="expose">EXPOSE</h3>
<pre><code>EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]
</code></pre>
<ol>
<li><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。</li>
<li>在 Dockerfile 中写入这样的声明有两个好处。
<ol>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>
<li>另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</li>
</ol>
</li>
<li>可以指定端口监听TCP还是UDP，如果没有指定协议，则默认为TCP。</li>
</ol>
<pre><code>EXPOSE 80/tcp #tcp
EXPOSE 80/udp #udp
</code></pre>
<h3 id="entrypoint">ENTRYPOINT</h3>
<pre><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] #exec格式
ENTRYPOINT command param1 param2 #shell格式
</code></pre>
<ol>
<li><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。</li>
<li>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code>。</li>
</ol>
<h2 id="nuxt-demo一个简单的dockerfile">nuxt-demo一个简单的Dockerfile</h2>
<pre><code class="language-shell">yarn create nuxt-app hello-world
</code></pre>
<pre><code>FROM node:lts
ENV HOST 0.0.0.0
WORKDIR /app
COPY . /app
RUN yarn &amp;&amp; yarn build
CMD [&quot;yarn&quot;, &quot;start&quot;]
</code></pre>
<h2 id="官方参考文档">官方参考文档</h2>
<blockquote>
<p>Dockerfile文档：https://docs.docker.com/engine/reference/builder/</p>
<p>docker-library：https://github.com/docker-library</p>
</blockquote>
<br/>
<br/>
<br/>
<blockquote>
<p>本文标题： Dockerfile语法梳理<br>
本文作者： 方乙百<br>
本文链接： https://fangyibai.github.io/post/dockerfile-clear-up/<br>
版权声明： 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请保留原文链接及作者！</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vagrant搭建开发环境]]></title>
        <id>https://fangyibai.github.io/post/vagrant-dev-env/</id>
        <link href="https://fangyibai.github.io/post/vagrant-dev-env/">
        </link>
        <updated>2020-03-21T16:13:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vagrant介绍">vagrant介绍</h3>
<blockquote>
<p>Vagrant是一款用于构建及配置虚拟开发环境的软件，基于Ruby,主要以命令行的方式运行。主要使用Oracle的开源VirtualBox虚拟化系统，与Chef，Salt，Puppet等环境配置管理软件搭配使用， 可以实行快速虚拟开发环境的构建。</p>
</blockquote>
<p>Vagrant目前是国内互联网公司应用最多的内部开发环境工具。Vagrant是我们开发者的福音，使我们完全摆脱了重复配置环境的处境。Vagrant简单的配置，丰富的自动化脚本资源以及分享的便捷性都是我们应该学习的思想，节省开发人员的大量准备工作时间,使开发人员更专注公司业务开发。</p>
<h3 id="安装文档">安装文档</h3>
<p>使用 VirtualBox 来搭建虚拟机，主要是免费。</p>
<p>Vagrant 也支持 VMware，不过 VMware 是收费的，对应的 Vagrant 版本也是收费的。</p>
<h4 id="安装virtualbox">安装VirtualBox</h4>
<p>官方下载地址：https://www.virtualbox.org/wiki/Downloads</p>
<h4 id="安装-vagrant">安装 Vagrant</h4>
<p>官方下载地址：https://www.vagrantup.com/downloads.html</p>
<p>完成后使用命令 <code>vagrant --help</code> 会提示vagrant支持的命令和参数</p>
<h3 id="创建一个centos7">创建一个centos7</h3>
<p><code>vagrant init centos/7</code> 初始化虚拟机，会生成一个Vagrantfile文件，这个文件描述了要创建什么样的虚拟机。</p>
<p><code>vagrant up</code> 启动虚拟机，如果本地已经有box文件会直接加载，如果不存在会自动拉取。</p>
<p>在当前目录运行<code>vagrant ssh</code>会进入到centos里去。</p>
<p>vagrant有一个网站<a href="https://app.vagrantup.com/">VagrantCloud</a>想要创建其它虚拟机，可以在<a href="https://app.vagrantup.com/">VagrantCloud</a>搜索想要的Vagrantfile。</p>
<p>比如想要一个ubuntu的系统，直接贴到Vagrantfile里即可使用了。</p>
<pre><code>Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;ubuntu/trusty64&quot;
end
</code></pre>
<h3 id="vagrantfile文件描述">Vagrantfile文件描述</h3>
<pre><code>#端口映射：将guest虚拟机的端口映射到host物理机的端口
config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080
#设置私有网络,只有物理机能进行通信
config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;
#设置公共网络
# config.vm.network &quot;public_network&quot;
#共享文件夹
config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;
#启动后执行shell命令
config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL
  apt-get update
  apt-get install -y apache2
SHELL
</code></pre>
<h3 id="使用vagrantfile创建复杂环境">使用Vagrantfile创建复杂环境</h3>
<p>创建3台带docker环境的虚拟机，相互之间可进行通信。</p>
<ul>
<li>Vagrantfile配置</li>
</ul>
<pre><code># -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version &quot;&gt;= 1.6.0&quot;

boxes = [
    {
        :name =&gt; &quot;swarm-manager&quot;,
        :eth1 =&gt; &quot;192.168.205.10&quot;,
        :mem =&gt; &quot;1024&quot;,
        :cpu =&gt; &quot;1&quot;
    },
    {
        :name =&gt; &quot;swarm-worker1&quot;,
        :eth1 =&gt; &quot;192.168.205.11&quot;,
        :mem =&gt; &quot;1024&quot;,
        :cpu =&gt; &quot;1&quot;
    },
    {
        :name =&gt; &quot;swarm-worker2&quot;,
        :eth1 =&gt; &quot;192.168.205.12&quot;,
        :mem =&gt; &quot;1024&quot;,
        :cpu =&gt; &quot;1&quot;
    }
]

Vagrant.configure(2) do |config|

  config.vm.box = &quot;centos7_docker_swarm&quot;

  boxes.each do |opts|
      config.vm.define opts[:name] do |config|
        config.vm.hostname = opts[:name]
        config.vm.provider &quot;vmware_fusion&quot; do |v|
          v.vmx[&quot;memsize&quot;] = opts[:mem]
          v.vmx[&quot;numvcpus&quot;] = opts[:cpu]
        end

        config.vm.provider &quot;virtualbox&quot; do |v|
          v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, opts[:mem]]
          v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, opts[:cpu]]
        end

        config.vm.network :private_network, ip: opts[:eth1]
      end
  end
  
  config.vm.provision &quot;shell&quot;, privileged: true, path: &quot;./setup.sh&quot;

end

</code></pre>
<ul>
<li>setup.sh</li>
</ul>
<pre><code class="language-shell">#/bin/sh

# install some tools
sudo yum install -y git vim gcc glibc-static telnet bridge-utils

# install docker
curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh

# start docker service
sudo groupadd docker
sudo gpasswd -a vagrant docker
sudo systemctl start docker

rm -rf get-docker.sh

</code></pre>
<h3 id="环境打包">环境打包</h3>
<p><code>vagrant package</code>命令打包完成后会在当前目录生成一个 <code>package.box</code> 的文件，将这个文件传给其他用户，其他用户只要添加这个 box 并用其初始化自己的开发目录就能得到一个一模一样的开发环境了。</p>
<p>使用<code>vagrant package --help</code>查看其它参数用法</p>
<pre><code>    --base NAME                  Name of a VM in VirtualBox to package as a base box (VirtualBox Only)
    --output NAME                Name of the file to output
    --include FILE,FILE..        Comma separated additional files to package with the box
    --vagrantfile FILE           Vagrantfile to package with the box
-h, --help                       Print this help
</code></pre>
<p>注意打包需退出并关闭虚拟机。</p>
<h3 id="常用命令">常用命令</h3>
<h4 id="box管理命令">box管理命令</h4>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">vagrant box list</td>
<td style="text-align:left">查看本地box列表</td>
</tr>
<tr>
<td style="text-align:left">vagrant box add</td>
<td style="text-align:left">添加box到列表</td>
</tr>
<tr>
<td style="text-align:left">vagrant box remove</td>
<td style="text-align:left">从box列表移除</td>
</tr>
</tbody>
</table>
<h4 id="vagrant命令">vagrant命令</h4>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">vagrant init</td>
<td style="text-align:left">初始化</td>
</tr>
<tr>
<td style="text-align:left">vagrant up</td>
<td style="text-align:left">启动虚拟机</td>
</tr>
<tr>
<td style="text-align:left">vagrant halt</td>
<td style="text-align:left">关闭虚拟机</td>
</tr>
<tr>
<td style="text-align:left">vagrant reload</td>
<td style="text-align:left">重启虚拟机</td>
</tr>
<tr>
<td style="text-align:left">vagrant ssh</td>
<td style="text-align:left">SSH进入虚拟机</td>
</tr>
<tr>
<td style="text-align:left">vagrant suspend</td>
<td style="text-align:left">挂起虚拟机</td>
</tr>
<tr>
<td style="text-align:left">vagrant resume</td>
<td style="text-align:left">唤醒虚拟机</td>
</tr>
<tr>
<td style="text-align:left">vagrant status</td>
<td style="text-align:left">查看虚拟机运行状态</td>
</tr>
<tr>
<td style="text-align:left">vagrant destroy</td>
<td style="text-align:left">销毁当前虚拟机</td>
</tr>
</tbody>
</table>
<h3 id="常见问题">常见问题</h3>
<ol>
<li>
<p>在安装一些软件时需要确认密码，默认账号/密码是<code>vagrant/vagrant</code>，root账号/密码：<code>root/vagrant</code></p>
</li>
<li>
<p>自动下载拉取镜像太慢，建议手动下载镜像。</p>
<pre><code>vagrant box add {title} {url}
vagrant init {title}
vagrant up
</code></pre>
</li>
<li>
<p>此文所用版本</p>
<ul>
<li>
<blockquote>
<p>VirtualBox 6.1.4</p>
</blockquote>
</li>
<li>
<blockquote>
<p>vagrant 2.2.7</p>
</blockquote>
</li>
<li>
<blockquote>
<p>iTrem2  3.2.0</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="扩展资料">扩展资料</h3>
<p>官网文档：</p>
<blockquote>
<p>vagrant：https://www.vagrantup.com/docs/</p>
</blockquote>
<blockquote>
<p>Vagrantfile：https://www.vagrantup.com/docs/vagrantfile/</p>
</blockquote>
<blockquote>
<p>镜像搜索：https://app.vagrantup.com/boxes/search</p>
</blockquote>
<br/>
<br/>
<br/>
<blockquote>
<p>本文标题： vagrant搭建开发环境<br>
本文作者： 方乙百<br>
本文链接： https://fangyibai.github.io/post/vagrant-dev-env/<br>
版权声明： 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> 许可协议。转载请保留原文链接及作者！</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://fangyibai.github.io/post/hello-gridea/</id>
        <link href="https://fangyibai.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>